
skip WS  r:\s+ ;

term IF     'if'    ;
term FI     'fi'    ;
term DO     'do'    ; 
term OD     'od'    ;
term SKIP   'skip'  ;
term OR     'or'    ; 
term AND    'and'   ;
term TRUE   'true'  ;
term FALSE  'false' ;

term SEMI   ';'     ;
term PIPE   '|'     ;
term ARROW  '=>'    ;
term LBR    '{'     ; 
term RBR    '}'     ;
term ASSIGN ':='    ;
term COMMA  ','     ;
term LPAR   '('     ;
term RPAR   ')'     ;
term BANG   '!'     ;
term LT     '<'     ;
term LE     '<='    ;
term GT     '>'     ;
term GE     '>='    ;
term EQ     '='     ; 
term NE     '!='    ;
term SLASH  '/'     ;
term STAR   '*'     ;
term PLUS   '+'     ;
term MINUS  '-'     ;

term IDENT  r:\w+  ;
term NUMBER r:[1-9][0-9]* ;


goal rule StatementList {
    => StatementList ';' Statement ;
    => Statement ;
}

rule IfStmt {
    => IF GuardedStmtList FI ;
}

rule DoStmt {
    => DO GuardedStmtList OD ;
}

rule GuardedStmtList {
    => GuardedStmt ;
    => GuardedStmtList PIPE GuardedStmt ;
}

rule GuardedStmt {
    => BoolExp ARROW Statement ;
}

rule Statement {
    => Assignment ;
    => IfStmt ;
    => DoStmt ;
    => '{' StatementList '}' ;
    => SKIP ;
}

rule Assignment {
    => IdentList ASSIGN ExpList ;
}

rule IdentList {
    => IdentList ',' IDENT ;
    => IDENT ;
}

rule ExpList {
    => ExpList ',' MathExp ;
    => MathExp ;
}

rule MathTerm {
    => NUMBER ;
    => IDENT ;
    => '(' MathExp ')' ;
}

rule Divide {
    => MathTerm SLASH MathTerm ;
    => MathTerm ;
}

rule Factor {
    => Factor '*' Divide ;
    => Divide ;
}

rule MathExp {
    => MathExp PLUS Factor ;
    => MathExp MINUS Factor ;
    => Factor ;
}

rule BoolTerm {
    => TRUE ;
    => FALSE ;
    => '(' BoolExp ')' ;
    => '!' BoolTerm ;
}

rule RelOp {
    => LT ;
    => LE ;
    => GT ;
    => GE ;
    => EQ ;
    => NE ;
}

rule Compare {
    => MathExp RelOp MathExp ;
}

rule BoolExp {
    => BoolTerm ;
    => Compare ;
    => BoolExp OR Compare ;
    => BoolExp OR BoolTerm ;
}
