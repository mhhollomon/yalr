
skip WS      r:\s+     ;

term<float> NUMBER r:[-+]?\d*\.?\d+([eE][-+]?\d+)? <%{ return atof(lexeme.data()); }%>
term PLUS '+'  @assoc=left @prec=100 ;
term MINUS '-' @assoc=left @prec=PLUS ;
term MULTI '*' @assoc=left @prec=200 ;
term DIV   '/' @assoc=left @prec='*' ;

goal rule statement_list {
    => statement                <%{ std::cout << "answer = " << _v1 << "\n"; }%>
    => statement statement_list <%{ std::cout << "answer = " << _v1 << "\n"; }%>
}

rule <float> statement { => expression <%{ return _v1; }%> }

rule <float> expression {
    => l:expression '+' r:expression <%{ return l + r; }%>
    => l:expression '-' r:expression <%{ return l - r; }%>
    => l:expression '*' r:expression <%{ return l * r; }%>
    => l:expression '/' r:expression <%{ return l / r; }%>
    => NUMBER             <%{ return _v1; }%>
    => '(' expression ')' <%{ return _v2; }%>
}
