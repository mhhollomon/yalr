/*
 * The regex language recognized by C++11 in ecmascript mode.
 *
 * Translated from https://en.cppreference.com/w/cpp/regex/ecmascript
 *
 * Lots of unresolved shift/reduce errors.
 *
 * 186 states. heh.
 *
 * Completely untested. Use at your own risk.
 */

 
rule Lower {
    => 'a' ; => 'b' ; => 'c' ; => 'd' ; => 'e' ;
    => 'f' ; => 'g' ; => 'h' ; => 'i' ; => 'j' ;
    => 'k' ; => 'l' ; => 'm' ; => 'n' ; => 'o' ;
    => 'p' ; => 'q' ; => 'r' ; => 's' ; => 't' ;
    => 'u' ; => 'v' ; => 'w' ; => 'x' ; => 'y' ;
    => 'z' ;
}

rule LHEX {
    => 'a' ; => 'b' ; => 'c' ; => 'd' ; => 'e' ; => 'f' ;
}

rule Upper {
    => 'A' ; => 'B' ; => 'C' ; => 'D' ; => 'E' ;
    => 'F' ; => 'G' ; => 'H' ; => 'I' ; => 'J' ;
    => 'K' ; => 'L' ; => 'M' ; => 'N' ; => 'O' ;
    => 'P' ; => 'Q' ; => 'R' ; => 'S' ; => 'T' ;
    => 'U' ; => 'V' ; => 'W' ; => 'X' ; => 'Y' ;
    => 'Z' ;
}

rule UHEX {
    => 'A' ; => 'B' ; => 'C' ; => 'D' ; => 'E' ; => 'F' ;
}

term ZERO '0' ;
term NDDIGIT r:[1-9] ;

rule DecDigit {
    => ZERO ; => NDDIGIT ;
}

rule HexDigit {
    => DecDigit ;
    => LHEX ;
    => UHEX ;
}

/*************** START **********************/

goal rule Pattern {
    => Disjunction ;
}

rule Disjunction {
    => Alternative ;
    => Alternative '|' Disjunction ;
}

rule Alternative {
    => ;
    => Alternative Term ;
}

rule Term {
    => Assertion ;
    => Atom ;
    => Atom Quantifier ;
}

rule Quantifier {
    => QuantifierPrefix ;
    => QuantifierPrefix '?' ;
}

rule QuantifierPrefix {
    => '*' ;
    => '+' ;
    => '?' ;
    => '{' DecimalDigits '}' ;
    => '{' DecimalDigits ',' '}' ;
    => '{' ',' DecimalDigits '}' ;
    => '{' DecimalDigits ',' DecimalDigits '}' ;
}


rule DecimalDigits {
    => DecDigit ;
    => DecimalDigits DecDigit ;
}

term CARET    '^'    ;
term DOLR     '$'    ;
term ESC_L_B  '\\b'   ; // literal backslash followed by "b"
term ESC_U_B  '\\B'   ; // literal backslash followed by "B"
term EQUAL    '='     ;
term NOT      '!'     ;
term LP       '('     ;
term RP       ')'     ;

rule Assertion {
    => CARET ;
    => DOLR ;
    => ESC_L_B ; // Positive Word boundary
    => ESC_U_B ; // Negative Word Boundary
    => LP '?' EQUAL Disjunction RP ;
    => LP '?' NOT   Disjunction RP ;
}

term DOT      '.'    ;
term COLON    ':'     ;
term DASH     '-' ;
//term BKSL     '\\\\'    ;
term NULESC   '\\\\0' ;
term ESCCHAR  r:\\\\[^[:alnum:]] ;
term ESCCNTRL r:\\\\[fnrtv] ;
term HEXCODE  r:\\\\x[a-fA-F0-9]{2} ;
term UNICODE  r:\\\\u[a-fA-F0-9]{4} ;
term CCODE    r:\\\\c[A-Za-z] ;
term BACKREF  r:\\\\[1-9][0-9]* ;
term CHARCLSS r:\\\\[dDsSwW] ;

/* All the escape sequences in AtomEscape sequences are
 * distinquishable by the second character and don't have alternate meanings in
 * other parts of the grammar. So, they have been hoisted directly into Atom.
 */
rule Atom {
    => PatternCharacter ;
    => DOT      ;
    => BACKREF  ;  // DecimalEscape
    => ESCCHAR  ;  // CharacterEscape::IdentityEscape
    => ESCCNTRL ;  // CharacterEscape::ControlEscape
    => HEXCODE  ;  // CharacterEscape::HexEscapeSequence
    => UNICODE  ;  // CharacterEscape::UnicodeEscapeSequence
    => CCODE    ;  // CharacterEscape::CharacterEscape
    => CHARCLSS ;  // CharacterClassEscape
    => CharacterClass ;
    => LP Disjunction RP ;
    => LP '?' COLON Disjunction RP ;
}

rule PatternCharacter {
    => Lower ; => Upper ; => DecDigit ;
    => COLON ; => DASH  ; => NULESC ;
    => EQUAL ; => NOT   ;
    => PCHAR ;
}

rule CharacterClass {
    => '[' CARET ClassRanges ']' ; // hmm do I need to do something to disambiguate this?
    => '[' ClassRanges ']' ;
}

rule ClassRanges {
    => ;
    => NonemptyClassRanges ;
    => ClassAtomExClass ;
    => ClassAtomCollatingElement ;
    => ClassAtomEquivalence ;
}

rule NonemptyClassRanges {
    => ClassAtom ;
    => ClassAtom NonemptyClassRangesNoDash ;
    => ClassAtom DASH ClassAtom ClassRanges ;
}

rule NonemptyClassRangesNoDash {
    => ClassAtom ;
    => ClassAtomNoDash NonemptyClassRangesNoDash ;
    => ClassAtomNoDash DASH ClassAtom ClassRanges ;
}

rule ClassAtom {
    => DASH ;
    => ClassAtomNoDash ; 
}

rule AtomNoDash_Source {
    => Upper; => Lower; => DecDigit;
    => '.'; => ':'; => ';' ; => '[';
    => ','; => '?'; => '(' ; => ')';
    => '@'; => '#'; => '$' ; => '^';
    => '&'; => '*'; => '\''; => '"';
    => '|'; => '!' ; => '~'; => '`';
    => '\n'; => '<'; => '>'; => '\\';
}

rule ClassAtomNoDash {
    => AtomNoDash_Source ;
    => NULESC ;
    => ESC_L_B ; // (backspace char)
    => CCODE ;
    => CHARCLSS ;
}

rule ClassAtomExClass {
    => '[' COLON ClassName COLON ']' ;
}

rule ClassAtomCollatingElement {
    => '[' DOT ClassName DOT ']' ;
}

rule ClassAtomEquivalence {
    => '[' EQUAL ClassName EQUAL ']' ;
}

rule ClassName {
    => Lower ;
    => ClassName Lower ;
}


// This needs to be close to the bottom so that it is not
// a "first" match.
term PCHAR    r:[^$^\\\\.*+?()\\][}{|] ;

